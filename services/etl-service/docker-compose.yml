version: "3.9"

# ETL Service - Docker Compose independiente
# Puede ejecutarse completamente separado de otros servicios FixeatAI

services:
  etl-service:
    build: .
    image: fixeatai-etl:latest
    container_name: etl-service
    
    # Puerto independiente
    ports:
      - "${ETL_SERVICE_PORT:-9000}:9000"
    
    # Variables de entorno desde .env
    env_file:
      - .env
    
    # Variables adicionales
    environment:
      - ETL_SERVICE_NAME=${ETL_SERVICE_NAME:-etl-service}
      - ETL_ENV=${ETL_ENV:-production}
      - ETL_LOG_LEVEL=${ETL_LOG_LEVEL:-INFO}
      
      # Base de datos principal
      - ETL_DB_HOST=${ETL_DB_HOST}
      - ETL_DB_PORT=${ETL_DB_PORT:-3306}
      - ETL_DB_USER=${ETL_DB_USER}
      - ETL_DB_PASSWORD=${ETL_DB_PASSWORD}
      - ETL_DB_DATABASE=${ETL_DB_DATABASE}
      
      # LLM para análisis IA
      - ETL_LLM_PROVIDER=${ETL_LLM_PROVIDER:-openai}
      - ETL_LLM_API_KEY=${ETL_LLM_API_KEY}
      - ETL_LLM_MODEL=${ETL_LLM_MODEL:-gpt-4o-mini}
      
      # Knowledge Base de destino
      - ETL_KB_URL=${ETL_KB_URL}
      - ETL_KB_AUTH_TOKEN=${ETL_KB_AUTH_TOKEN}
      
      # Configuración ETL
      - ETL_ENABLED=${ETL_ENABLED:-true}
      - ETL_BATCH_SIZE=${ETL_BATCH_SIZE:-500}
      - ETL_INCREMENTAL_HOURS=${ETL_INCREMENTAL_HOURS:-2}
      
    # Volúmenes independientes
    volumes:
      - etl-configs:/app/configs
      - etl-logs:/app/logs
      - etl-data:/app/data
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Restart policy
    restart: unless-stopped
    
    # Recursos (ajustables según necesidades)
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Opcional: Base de datos local para desarrollo/testing
  mysql-dev:
    image: mysql:8.0
    container_name: etl-mysql-dev
    profiles: ["dev", "testing"]  # Solo se ejecuta con --profile dev
    
    environment:
      - MYSQL_ROOT_PASSWORD=${DEV_MYSQL_ROOT_PASSWORD:-root_password}
      - MYSQL_DATABASE=${DEV_MYSQL_DATABASE:-etl_test_db}
      - MYSQL_USER=${DEV_MYSQL_USER:-etl_user}
      - MYSQL_PASSWORD=${DEV_MYSQL_PASSWORD:-etl_password}
    
    ports:
      - "3307:3306"  # Puerto diferente para no conflictar
    
    volumes:
      - mysql-dev-data:/var/lib/mysql
      - ./dev/sample-data.sql:/docker-entrypoint-initdb.d/sample-data.sql:ro
    
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Opcional: LLM local con Ollama para desarrollo
  ollama-dev:
    image: ollama/ollama:latest
    container_name: etl-ollama-dev
    profiles: ["dev", "local-llm"]  # Solo con --profile local-llm
    
    ports:
      - "11434:11434"
    
    volumes:
      - ollama-data:/root/.ollama
    
    environment:
      - OLLAMA_MODELS=${OLLAMA_MODELS:-llama3.1:8b}
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volúmenes independientes
volumes:
  etl-configs:
    driver: local
    name: etl-service-configs
  
  etl-logs:
    driver: local
    name: etl-service-logs
  
  etl-data:
    driver: local
    name: etl-service-data
  
  # Solo para desarrollo
  mysql-dev-data:
    driver: local
    name: etl-mysql-dev-data
  
  ollama-data:
    driver: local
    name: etl-ollama-data

# Redes (opcionales)
networks:
  default:
    name: etl-service-network
    driver: bridge
